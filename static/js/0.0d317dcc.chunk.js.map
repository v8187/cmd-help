{"version":3,"sources":["components/DataTypes/index.tsx","components/Availability.tsx","components/NoUtilityRemarks.tsx","components/CountryRemarks.tsx","components/DataTypes/DTIndex.tsx","components/DataTypes/DTAadhaar.tsx","components/LinkWebApp.tsx","components/DataTypes/DTAlphanumeric.tsx","components/DataTypes/DTArray.tsx","components/DataTypes/DTAutoIncrement.tsx","components/DataTypes/DTBoolean.tsx","components/DataTypes/DTCCPin.tsx","components/DataTypes/DTCity.tsx","components/DataTypes/DTColor.tsx","components/DataTypes/DTCompany.tsx","components/DataTypes/DTCountry.tsx","components/DataTypes/DTCreditCard.tsx","components/DataTypes/DTCurrency.tsx","components/DataTypes/DTCVV.tsx","components/DataTypes/DTDateTime.tsx","components/DataTypes/DTDuration.tsx","components/DataTypes/DTEmail.tsx","components/DataTypes/DTGender.tsx","components/DataTypes/DTJsonObject.tsx","components/DataTypes/DTLatLong.tsx","components/DataTypes/DTPAN.tsx","components/DataTypes/DTPassword.tsx","components/DataTypes/DTPersonName.tsx","components/DataTypes/DTPhoneNo.tsx","components/DataTypes/DTPincode.tsx","components/DataTypes/DTRandomNumber.tsx","components/DataTypes/DTRandomWords.tsx","components/DataTypes/DTState.tsx","components/DataTypes/DTStreetAddress.tsx","components/DataTypes/DTUID.tsx","components/DataTypes/DTUsername.tsx"],"names":["DataType","_super","__extends","prototype","render","this","props","location","pathname","replace","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_3__DTAadhaar__","onMount","__WEBPACK_IMPORTED_MODULE_4__DTAlphanumeric__","__WEBPACK_IMPORTED_MODULE_5__DTArray__","__WEBPACK_IMPORTED_MODULE_6__DTAutoIncrement__","__WEBPACK_IMPORTED_MODULE_7__DTBoolean__","__WEBPACK_IMPORTED_MODULE_8__DTCCPin__","__WEBPACK_IMPORTED_MODULE_9__DTCity__","__WEBPACK_IMPORTED_MODULE_10__DTColor__","__WEBPACK_IMPORTED_MODULE_11__DTCompany__","__WEBPACK_IMPORTED_MODULE_12__DTCountry__","__WEBPACK_IMPORTED_MODULE_13__DTCreditCard__","__WEBPACK_IMPORTED_MODULE_14__DTCurrency__","__WEBPACK_IMPORTED_MODULE_15__DTCVV__","__WEBPACK_IMPORTED_MODULE_16__DTDateTime__","__WEBPACK_IMPORTED_MODULE_17__DTDuration__","__WEBPACK_IMPORTED_MODULE_18__DTEmail__","__WEBPACK_IMPORTED_MODULE_19__DTGender__","__WEBPACK_IMPORTED_MODULE_20__DTJsonObject__","__WEBPACK_IMPORTED_MODULE_21__DTLatLong__","__WEBPACK_IMPORTED_MODULE_22__DTPAN__","__WEBPACK_IMPORTED_MODULE_23__DTPassword__","__WEBPACK_IMPORTED_MODULE_24__DTPersonName__","__WEBPACK_IMPORTED_MODULE_25__DTPhoneNo__","__WEBPACK_IMPORTED_MODULE_26__DTPincode__","__WEBPACK_IMPORTED_MODULE_27__DTRandomNumber__","__WEBPACK_IMPORTED_MODULE_28__DTRandomWords__","__WEBPACK_IMPORTED_MODULE_29__DTState__","__WEBPACK_IMPORTED_MODULE_30__DTStreetAddress__","__WEBPACK_IMPORTED_MODULE_31__DTUID__","__WEBPACK_IMPORTED_MODULE_32__DTUsername__","__WEBPACK_IMPORTED_MODULE_1__DTIndex__","__WEBPACK_IMPORTED_MODULE_2__Page404__","Availability","className","inApp","__WEBPACK_IMPORTED_MODULE_2__LinkWebApp__","inLib","__WEBPACK_IMPORTED_MODULE_1__LinkRsMock__","__webpack_require__","n","__WEBPACK_IMPORTED_MODULE_2__LinkRsUtils__","__webpack_exports__","_a","methodName","dataType","DTIndex","call","console","log","__WEBPACK_IMPORTED_MODULE_2__configs_data_types__","map","group","i","key","label","dataTypes","dType","j","__WEBPACK_IMPORTED_MODULE_1_react_router_dom__","to","id","DTAadhaar","componentDidMount","__WEBPACK_IMPORTED_MODULE_1__Availability__","__WEBPACK_IMPORTED_MODULE_2__NoUtilityRemarks__","LinkWebApp","href","target","DTAlphanumeric","DTArray","DTAutoIncrement","DTBoolean","DTCCPin","DTCity","__WEBPACK_IMPORTED_MODULE_2__CountryRemarks__","DTColor","DTCompany","DTCountry","DTCreditCard","DTCurrency","DTCVV","DTDateTime","DTDuration","rowSpan","DTEmail","DTGender","DTJsonObject","DTLatLong","DTPAN","DTPassword","DTPersonName","DTPhoneNo","DTPincode","DTRandomNumber","DTRandomWords","DTState","DTStreetAddress","DTUID","DTUsername"],"mappings":"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","file":"static/js/0.0d317dcc.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport { Location } from 'history';\n\nimport DTIndex from './DTIndex';\nimport Page404 from '../Page404';\n\nimport DTAadhaar from './DTAadhaar';\nimport DTAlphanumeric from './DTAlphanumeric';\nimport DTArray from './DTArray';\nimport DTAutoIncrement from './DTAutoIncrement';\nimport DTBoolean from './DTBoolean';\nimport DTCCPin from './DTCCPin';\nimport DTCity from './DTCity';\nimport DTColor from './DTColor';\nimport DTCompany from './DTCompany';\nimport DTCountry from './DTCountry';\nimport DTCreditCard from './DTCreditCard';\nimport DTCurrency from './DTCurrency';\nimport DTCVV from './DTCVV';\nimport DTDateTime from './DTDateTime';\nimport DTDuration from './DTDuration';\nimport DTEmail from './DTEmail';\nimport DTGender from './DTGender';\nimport DTJsonObject from './DTJsonObject';\nimport DTLatLong from './DTLatLong';\nimport DTPAN from './DTPAN';\nimport DTPassword from './DTPassword';\nimport DTPersonName from './DTPersonName';\nimport DTPhoneNo from './DTPhoneNo';\nimport DTPincode from './DTPincode';\nimport DTRandomNumber from './DTRandomNumber';\nimport DTRandomWords from './DTRandomWords';\nimport DTState from './DTState';\nimport DTStreetAddress from './DTStreetAddress';\nimport DTUID from './DTUID';\nimport DTUsername from './DTUsername';\n\nexport interface IDataTypeP {\n    location: Location;\n    onMount?: () => void;\n};\n\nexport default class DataType extends Component<IDataTypeP> {\n\n    render() {\n        const pathname = this.props.location.pathname.replace(/\\//, '');\n\n        switch (pathname) {\n            case 'aadhaar': return <DTAadhaar onMount={this.props.onMount} />;\n            case 'alphanumeric': return <DTAlphanumeric onMount={this.props.onMount} />;\n            case 'array': return <DTArray onMount={this.props.onMount} />;\n            case 'autoIncrement': return <DTAutoIncrement onMount={this.props.onMount} />;\n            case 'boolean': return <DTBoolean onMount={this.props.onMount} />;\n            case 'ccPin': return <DTCCPin onMount={this.props.onMount} />;\n            case 'city': return <DTCity onMount={this.props.onMount} />;\n            case 'color': return <DTColor onMount={this.props.onMount} />;\n            case 'company': return <DTCompany onMount={this.props.onMount} />;\n            case 'country': return <DTCountry onMount={this.props.onMount} />;\n            case 'creditCard': return <DTCreditCard onMount={this.props.onMount} />;\n            case 'currency': return <DTCurrency onMount={this.props.onMount} />;\n            case 'cvv': return <DTCVV onMount={this.props.onMount} />;\n            case 'dateTime': return <DTDateTime onMount={this.props.onMount} />;\n            case 'duration': return <DTDuration onMount={this.props.onMount} />;\n            case 'email': return <DTEmail onMount={this.props.onMount} />;\n            case 'gender': return <DTGender onMount={this.props.onMount} />;\n            case 'jsonObject': return <DTJsonObject onMount={this.props.onMount} />;\n            case 'latLong': return <DTLatLong onMount={this.props.onMount} />;\n            case 'pan': return <DTPAN onMount={this.props.onMount} />;\n            case 'password': return <DTPassword onMount={this.props.onMount} />;\n            case 'personName': return <DTPersonName onMount={this.props.onMount} />;\n            case 'phoneNo': return <DTPhoneNo onMount={this.props.onMount} />;\n            case 'pincode': return <DTPincode onMount={this.props.onMount} />;\n            case 'randomNumber': return <DTRandomNumber onMount={this.props.onMount} />;\n            case 'randomWords': return <DTRandomWords onMount={this.props.onMount} />;\n            case 'state': return <DTState onMount={this.props.onMount} />;\n            case 'streetAddress': return <DTStreetAddress onMount={this.props.onMount} />;\n            case 'uid': return <DTUID onMount={this.props.onMount} />;\n            case 'username': return <DTUsername onMount={this.props.onMount} />;\n            case 'dataTypes': return <DTIndex />;\n            default: return <Page404 />;\n        }\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/index.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport LinkRsMock from './LinkRsMock';\nimport LinkWebApp from './LinkWebApp';\n\nexport interface IAvailabilityP {\n    inApp: boolean;\n    inLib: boolean;\n};\n\nexport default class Availability extends Component<IAvailabilityP> {\n\n    render() {\n        return (\n            <article className=\"available-in\">\n                <h2>Available In</h2>\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>{this.props.inApp ? <span className=\"yes\">&#10004;</span> : <span className=\"no\"> &#10008; </span>}</td>\n                            <th>Web App? [ <LinkWebApp /> ]</th>\n                        </tr>\n                        <tr>\n                            <td>{this.props.inLib ? <span className=\"yes\">&#10004;</span> : <span className=\"no\"> &#10008;</span>}</td>\n                            <th>Mock Utility Library? [ <LinkRsMock /> ]</th>\n                        </tr>\n                    </tbody>\n                </table>\n            </article>\n        );\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/Availability.tsx","import * as React from 'react';\n\nimport LinkRsMock from './LinkRsMock';\nimport LinkRsUtils from './LinkRsUtils';\n\nexport default ({ methodName, dataType }) => (<>\n    <p>\n        There is no method available in <LinkRsMock /> for <b>{dataType}</b>.\n    </p> <p>\n        However, you can use <LinkRsUtils />'s <b>{methodName}</b> method for the same shown in below example:\n    </p>\n</>);\n\n\n// WEBPACK FOOTER //\n// ./src/components/NoUtilityRemarks.tsx","import * as React from 'react';\n\nexport default () => (<>\n    <p> As of now, data is available only for following countries: India, China, USA, Brazil, France.</p>\n    <p> All the mentioned countries will be considered, if no paramaters / options provided.</p>\n</>);\n\n\n// WEBPACK FOOTER //\n// ./src/components/CountryRemarks.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { groupedDataTypes } from '../../configs/data-types';\n\nconst renderDataTypes = () => {\n    return groupedDataTypes.map((group, i) => {\n        return [\n            <h3 key={`groupName${i + 1}`}>{group.label}:</h3>,\n            <ul key={`groupList${i + 1}`}>{\n                group.dataTypes.map((dType, j) => {\n                    return <li key={`groupItem${i}${j}`}>\n                        <Link to={`${dType.id}`}>{dType.label}</Link>\n                    </li>;\n                })\n            }</ul>\n        ];\n    })\n}\n\nexport default class DTIndex extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log('props', this.props);\n\n        return (<article className=\"data-types\">\n            <h1>Data types</h1>\n            <p>You can create Mock Data in following formats. Most of the formats are configurable. Click on Data type to see its' details</p>\n            {renderDataTypes()}\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTIndex.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTAadhaar extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"aadhaar\">\n            <h1>Aadhaar</h1>\n            <p>This Data Type can be used to generate 12 digit Aadhaar Number (Indian biometric based identity number).</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst aadhaarJson1 = [{\n    \"name\": \"myAdhar\",\n    \"type\": \"aadhaar\"\n}];\n\n// Output for 1 record:\n[{ myAdhar: 458956853214 }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"xToNum\" dataType=\"Aadhaar\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Pass 12 \"x\" to get random Aadhaar number \n */\nxToNum('xxxxxxxxxxxx'); // Outputs: 458956853214`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTAadhaar.tsx","import * as React from 'react';\nimport { Component } from \"react\";\n\nexport default class LinkWebApp extends Component {\n    render() {\n        return (<a\n            href=\"https://v8187.github.io/create-mock-data/\"\n            target=\"_blank\">\n            create-mock-data\n        </a>);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/LinkWebApp.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTAlphanumeric extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"alphanumeric\">\n            <h1>Alphanumeric</h1>\n            <p>This Data Type can be used to generate a random string in given format.\n                <br />- \"a\" can be used to generated random lowercase letter\n                <br />- \"A\" can be used to generated random uppercase letter\n                <br />- \"x\" can be used to generated random digit\n                <br />- Spaces &amp; Characters another than above will be returned as it is\n            </p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>format</td>\n                        <td>string</td>\n                        <td>&lt;empty string&gt;</td>\n                        <td>Optional. a => lowercase letter <br />\n                            A => uppercase letter <br />\n                            X => digit <br /></td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst alphaJson1 = [{\n    \"name\": \"vechicleNo\",\n    \"type\": \"alphanumeric\"\n}];\n\n// Output for 1 record:\n[{ vechicleNo: '' }]\n\n/** \n * Sample 2: With options containing Lower, Upper and digits\n */\n// Sample JSON:\nconst alphaJson2 = [{\n    \"name\": \"vechicleNo\",\n    \"type\": \"alphanumeric\",\n    \"options\": {\n        \"format\": \"aaxxAAaA\"\n    }\n}];\n\n// Output for 1 record:\n[{ vechicleNo: 'de89HUdE' }]\n\n/** \n * Sample 3: With options containing digits only\n */\nconst alphaJson3 = [{\n    \"name\": \"vechicleNo\",\n    \"type\": \"alphanumeric\",\n    \"options\": {\n        \"format\": \"xxxxx\"\n    }\n}];\n\n// Output for 1 record:\n[{ vechicleNo: '56702' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nalphanumeric(); // Outputs: ''\n\n/** Format with Lower, Upper and digits */\nalphanumeric({ format: 'aaxxAAaA' }); // Outputs: de89HUdE\n\n/** Format with 5 digits */\nalphanumeric({ format: 'xxxxx' }); // Outputs: 56702`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTAlphanumeric.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTArray extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"array\">\n            <h1>Array</h1>\n            <p>This Data Type can be used to generate list/array of nested objects.</p>\n            <p>As of now, only fix number of records can be generated as nested properties.</p>\n            <p><b>I__D</b> must be defined if you use <b>Upload JSON</b> functionality</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>count</td>\n                        <td>number | string</td>\n                        <td>10</td>\n                        <td>Optional. Fixed number of records will be generated based on count value.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Array as parent with 2 children\n */\nconst arrayJson = [{\n    \"I__D\": \"marks\",\n    \"name\": \"marks\",\n    \"type\": \"array\",\n    \"options\": { \"count\": 1 }\n}, {\n    \"name\": \"sem1\",\n    \"type\": \"randomNumber\",\n    \"options\": {\n        \"min\": 200, \"max\": 300\n    },\n    \"parentRef\": \"marks\"\n}, {\n    \"name\": \"sem2\",\n    \"type\": \"randomNumber\",\n    \"options\": {\n        \"min\": 400, \"max\": 500\n    },\n    \"parentRef\": \"marks\"\n}];\n\n// Output for 1 record:\n[{\n    \"marks\": [\n        {\n            \"sem1\": 267,\n            \"sem2\": 406\n        }\n    ]\n}]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <p>N/A</p>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTArray.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTAutoIncrement extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"auto-increment\">\n            <h1>Auto Increment</h1>\n            <p>This Data Type can be used to generate index (starts with 0) for each record.</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`// Sample JSON:\n[{\"name\": \"itemIndex\", \"type\", \"autoIncrement\"}]\n\n// Output for 3 records:\n[{itemIndex: 0}, {itemIndex: 1}, {itemIndex: 2}]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <p>N/A</p>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTAutoIncrement.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTBoolean extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"boolean\">\n            <h1>Boolean</h1>\n            <p>This Data Type can be used to generate true or false randomlly.</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`// Sample JSON:\n[{\"name\": \"isSeniorCitizen\", \"type\", \"boolean\"}]\n\n// Outputs:\n[{isSeniorCitizen: true}]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"randomItem\" dataType=\"Boolean\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`randomItem([true, false]); // Outputs: true`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTBoolean.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTCCPin extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"cc-pin\">\n            <h1>Credit Card PIN</h1>\n            <p>This Data Type can be used to generate 4 digit Credit Card PIN.</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst ccPinJson1 = [{\n    \"name\": \"cPin\",\n    \"type\": \"ccPin\"\n}];\n\n// Output for 1 record:\n[{ cPin: 4589 }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"xToNum\" dataType=\"Credit Card PIN\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Pass 4 \"x\" to get random Credit Card PIN Code \n */\nxToNum('xxxx'); // Outputs: 4589`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTCCPin.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport CountryRemarks from '../CountryRemarks';\n\nexport default class DTCity extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        console.log(this.props);\n        return (<article className=\"city\">\n            <h1>City</h1>\n            <p>\n                This Data Type can be used to generate random City name based on given Countries and States / Provinces.\n            </p>\n            <CountryRemarks />\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>countries</td>\n                        <td>ICountry[]</td>\n                        <td><pre>\n                            {`[{\n    name: 'India',\n    isdCode: '91',\n    code2: 'IN',\n    code3: 'IND'\n}]`}\n                        </pre></td>\n                        <td>\n                            <p>Optional. List of Countries in following format.</p>\n                            <pre>\n                                {`ICountry = {\n    name: string;\n    isdCode: string;\n    code2: string;\n    code3: string;\n}`}\n                            </pre>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>states</td>\n                        <td>IState[]</td>\n                        <td><pre>\n                            {`[{\n    id: '377',\n    name: 'Punjab',\n    country: 'IND',\n    latitude: 30.9,\n    longitude: 75.85\n}, {\n    id: '160',\n    name: 'Karnataka',\n    country: 'IND',\n    latitude: 12.98,\n    longitude: 77.58\n}]`}\n                        </pre></td>\n                        <td>\n                            <p>Optional. List of Countries in following format.</p>\n                            <pre>\n                                {`IState = {\n    id: string;\n    name: string;\n    country: string;\n    latitude: number;\n    longitude: number;\n}`}\n                            </pre>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst cityJson1 = [{\n    \"name\": \"myCity\",\n    \"type\": \"city\"\n}];\n\n// Output for 1 record:\n[{ myCity: 'Amritsar' }]\n\n/** \n * Sample 2: With options\n */\n// Sample JSON:\nconst cityJson2 = [{\n    \"name\": \"myCity\",\n    \"type\": \"city\",\n    \"options\": {\n        \"countries\": [{\n            \"name\": \"Brazil\",\n            \"isdCode\": \"55\",\n            \"code2\": \"BR\",\n            \"code3\": \"BRA\",\n            \"selected\": true\n        }],\n        \"states\": [{\n            \"id\": \"2116\",\n            \"name\": \"Acre\",\n            \"country\": \"BRA\",\n            \"latitude\": -9.97,\n            \"longitude\": -67.8,\n            \"selected\": true\n        }, {\n            \"id\": \"2113\",\n            \"name\": \"Amapa\",\n            \"country\": \"BRA\",\n            \"latitude\": 0.03,\n            \"longitude\": -51.05,\n            \"selected\": true\n        }]\n    }\n}];\n\n// Output for 1 record:\n[{ myCity: 'Rio Branco' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\ncity(); // Outputs: 'Amritsar'\n\n/** With options */\ncity({\n    countries: [{\n        name: 'Brazil',\n        isdCode: '55',\n        code2: 'BR',\n        code3: 'BRA',\n        selected: true\n    }],\n    states: [{\n        id: '2116',\n        name: 'Acre',\n        country: 'BRA',\n        latitude: -9.97,\n        longitude: -67.8,\n        selected: true\n    }, {\n        id: '2113',\n        name: 'Amapa',\n        country: 'BRA',\n        latitude: 0.03,\n        longitude: -51.05,\n        selected: true\n    }]\n}); // Outputs: 'Rio Branco'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTCity.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTColor extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"color\">\n            <h1>Color Name</h1>\n            <p>This Data Type can be used to generate random Color value in&nbsp; \n                 <b>English Color Name</b>&nbsp;,&nbsp;\n                 <b>Hexadecimal</b>&nbsp;,&nbsp; \n                 <b>RGB Numeric</b>&nbsp;,&nbsp; \n                <b>RGB Percentage</b>&nbsp; formats.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>format</td>\n                        <td>EColorFormat</td>\n                        <td>EColorFormat.NAME</td>\n                        <td>Optional. \n                            <pre>{` EColorFormat {\n    NAME = 0, // For English Color name\n    HEX_CODE = 1, // For Hexadecimal value\n    RGB_PERCENT = 2, // For RGB percentage value\n    RGB_NUMERIC = 3 // For RGB numeric value\n}`}</pre></td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst colorJson1 = [{\n    \"name\": \"myColor\",\n    \"type\": \"color\"\n}];\n\n// Output for 1 record:\n[{ myColor: 'Red' }]\n\n/** \n * Sample 2: Get Hexadecimal Color value\n */\nconst colorJson2 = [{\n    \"name\": \"myColor\",\n    \"type\": \"color\",\n    \"options\": {\n        \"format\": 1\n    }\n}];\n\n// Output for 1 record:\n[{ myColor: '#B0C4DE' }]\n\n/** \n * Sample 3: Get RGB Numeric Color value\n */\nconst colorJson3 = [{\n    \"name\": \"myColor\",\n    \"type\": \"color\",\n    \"options\": {\n        \"format\": 3\n    }\n}];\n\n// Output for 1 record:\n[{ myColor: 'rgb(255, 109.65, 73.95)' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\ncolor(); // Outputs: 'Red'\n\n/** Get Hexadecimal Color value */\ncolor({ format: 1 }); // Outputs: '#B0C4DE'\n\n/** Get RGB Numeric Color value */\ncolor({ format: 3 }); // Outputs: 'rgb(255, 109.65, 73.95)'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTColor.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTCompany extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"company\">\n            <h1>Company</h1>\n            <p>This Data Type can be used to generate random Company name as per given minimum and maximum length of words.</p>\n            <p>Company name must be of minimum 2 characters.</p>\n            <p>It accepts two parameters, min and max.</p>\n            <p>Defaults are min = 2 and max = 5.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>min</td>\n                        <td>number</td>\n                        <td>2</td>\n                        <td>Optional. min value must be lower than max value.</td>\n                    </tr>\n                    <tr>\n                        <td>max</td>\n                        <td>number</td>\n                        <td>5</td>\n                        <td>Optional. max value must be greater than min value.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst company1 = [{\n    \"name\": \"org1\",\n    \"type\": \"company\"\n}];\n\n// Output for 1 record:\n[{ org1: 'Netus Elit Institute' }]\n\n/** \n * Sample 2: With min = 10 & max = 20\n */\n// Sample JSON:\nconst company2 = [{\n    \"name\": \"org2\",\n    \"type\": \"company\",\n    \"options\": { \"min\": 4, \"max\": 5 }\n}];\n\n// Output for 1 record:\n[{ org2: 'Aliquet Placerat Vitae Pulvinar Associates' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\ncompany(); // Outputs: 'Netus Elit Institute'\n\n/** Sample 2: With min = 4 & max = 5 */\ncompany(3, 6); // Outputs: 'Aliquet Placerat Vitae Pulvinar Associates'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTCompany.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTCountry extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"country\">\n            <h1>Country</h1>\n            <p>\n                This Data Type can be used to generate random Country name.</p>\n            <p>\n                As of now, data is available only for following countries: India, China, USA, Brazil, France.\n            </p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst conJson1 = [{\n    \"name\": \"myCountry\",\n    \"type\": \"country\"\n}];\n\n// Output for 1 record:\n[{ myCountry: 'India' }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    country(); // Outputs: India\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTCountry.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTCreditCard extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"creditCard\">\n            <h1>Credit Card Number</h1>\n            <p>This Data Type can be used to generate random Credit Card Number in various formats.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>separator</td>\n                        <td>String</td>\n                        <td>&lt;space&gt;</td>\n                        <td>Optional. separator is used to fill any character between every 4 digits.\n                            Provide empty string ('') to get value without any space or character.\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>cardTypes</td>\n                        <td>ICCardType[]</td>\n                        <td><pre>{`[{\n    name: 'American Express',\n    formats: [{\n        iins: [34, 37],\n        range: {\n            min: 15,\n            max: 15\n        }\n    }]\n}]`}</pre></td>\n                        <td>Optional.\n                            <pre>{`ICCardType {\n    name?: string;\n    formats: ICCardFormat[];\n}\n\nICCardFormat {\n    iins: Array<IMinMax | number>;\n    range: IMinMax;\n}\n\nIMinMax {\n    min: number;\n    max: number;\n}`}</pre></td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst creditCardJson1 = [{\n    \"name\": \"myCC\",\n    \"type\": \"creditCard\"\n}];\n\n// Output for 1 record:\n[{ myCC: '370 0305 0952 7530' }]\n\n/** \n * Sample 2: With Empty String as seperator\n */\nconst creditCardJson2 = [{\n    \"name\": \"myCC\",\n    \"type\": \"creditCard\",\n    \"options\": {\n        \"separator\": \"\"\n    }\n}];\n\n// Output for 1 record:\n[{ myCC: '378554203655751' }]\n\n/** \n * Sample 3: With \"-\" as separator and with iins as numeric array or range of numbers\n */\nconst creditCardJson3 = [{\n    \"name\": \"myCC\",\n    \"type\": \"creditCard\",\n    \"options\": {\n        \"separator\": \"-\",\n        \"cardTypes\": [{\n            \"name\": \"Diners Club United States & Canada\",\n            \"formats\": [{\n                \"iins\": [54, 55],\n                \"range\": { \"min\": 16, \"max\": 16 }\n            }]\n        }, {\n            \"name\": \"JCB\",\n            \"formats\": [{\n                \"iins\": [{\n                    \"min\": 3528, \"max\": 3589\n                }],\n                \"range\": { \"min\": 16, \"max\": 19 }\n            }]\n        }]\n    }\n}];\n\n// Output for 1 record:\n[{ myCC: '3560-6609-1511-3386' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\ncreditCard(); // Outputs: '370 0305 0952 7530'\n\n/** With Empty String as seperator */\ncreditCard({ separator: '' }); // Outputs: '378554203655751'\n\n/** With \"-\" as separator and with iins as numeric array or range of numbers */\ncreditCard({\n    separator: '-',\n    cardTypes: [{\n        name: 'Diners Club United States & Canada',\n        formats: [{\n            iins: [54, 55],\n            range: { min: 16, max: 16 }\n        }]\n    }, {\n        name: 'JCB',\n        formats: [{\n            iins: [{\n                min: 3528, max: 3589\n            }],\n            range: { min: 16, max: 19 }\n        }]\n    }]\n}); // Outputs: '3560-6609-1511-3386'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTCreditCard.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTCurrency extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"currency\">\n            <h1>Currency</h1>\n            <p>This Data Type can be used to generate random Currency Amount in various formats.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>min</td>\n                        <td>number</td>\n                        <td>10</td>\n                        <td>Optional. min value must be lower than max value.</td>\n                    </tr>\n                    <tr>\n                        <td>max</td>\n                        <td>number</td>\n                        <td>1000</td>\n                        <td>Optional. max value must be greater than min value.</td>\n                    </tr>\n                    <tr>\n                        <td>decimals</td>\n                        <td>number</td>\n                        <td>2</td>\n                        <td>Optional. Number of digits allowed after decimal.</td>\n                    </tr>\n                    <tr>\n                        <td>separator</td>\n                        <td>String</td>\n                        <td>comma (,)</td>\n                        <td>Optional. separator is used to place any character after every 3 digits from right hand side.\n                            If amount is less than 3 digits than , there will be no separator used.\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>symbol</td>\n                        <td>ICSymbol</td>\n                        <td><pre>{`{\n    unicode: 'U+0024',\n    htmlCode: '\\\\\\\\0024',\n    name: 'DOLLAR SIGN',\n    symbol: '$'\n}`}</pre></td>\n                        <td>Optional.\n                            <pre>{`ICSymbol {\n    unicode?: string;\n    htmlCode?: string;\n    name?: string;\n    symbol: string;\n}`}</pre></td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst currencyJson1 = {\n    \"name\": \"price\",\n    \"type\": \"currency\"\n};\n\n// Output for 1 record:\n[{ price: '$433.26' }]\n\n/** \n * Sample 2: With Indian Rupee Symbol and 4 decimal place\n */\nconst currencyJson2 = {\n    \"name\": \"price\",\n    \"type\": \"currency\",\n    \"options\": {\n        \"min\": 10,\n        \"max\": 1000,\n        \"decimals\": 4,\n        \"separator\": \",\",\n        \"symbol\": {\n            \"unicode\": \"U+20B9\",\n            \"htmlCode\": \"\\\\u0010B9\",\n            \"name\": \"INDIAN RUPEE SIGN\",\n            \"symbol\": \"₹\"\n        }\n    }\n};\n\n// Output for 1 record:\n[{ price: '₹621.8930' }]\n\n/** \n * Sample 3: With min = 10000 and max 12000\n */\nconst currencyJson3 = {\n    \"name\": \"price\",\n    \"type\": \"currency\",\n    \"options\": {\n        \"min\": 10000,\n        \"max\": 12000,\n        \"decimals\": 2,\n        \"separator\": \",\",\n        \"symbol\": {\n            \"unicode\": \"U+0024\",\n            \"htmlCode\": \"\\\\\\\\0024\",\n            \"name\": \"DOLLAR SIGN\",\n            \"symbol\": \"$\"\n        }\n    }\n};\n\n// Output for 1 record:\n[{ price: '$11,391.34' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\ncurrency(); // Outputs: '$433.26'\n\n/** With Indian Rupee Symbol and 4 decimal place */\ncurrency({\n    min: 10,\n    max: 1000,\n    decimals: 4,\n    separator: ',',\n    symbol: {\n        unicode: 'U+20B9',\n        htmlCode: '\\\\u0010B9',\n        name: 'INDIAN RUPEE SIGN',\n        symbol: '₹'\n    }\n}); // Outputs: '₹621.8930'\n\n/** With min = 10000 and max 12000 */\ncurrency({\n    min: 10000,\n    max: 12000,\n    decimals: 2,\n    separator: ',',\n    symbol: {\n        unicode: 'U+0024',\n        htmlCode: '\\\\\\\\0024',\n        name: 'DOLLAR SIGN',\n        symbol: '$'\n    }\n}); // Outputs: '$11,391.34'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTCurrency.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTCVV extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"cc-pin\">\n            <h1>CVV Code</h1>\n            <p>This Data Type can be used to generate 3 digit CVV code.</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst cvvJson1 = [{\n    \"name\": \"myCvv\",\n    \"type\": \"cvv\"\n}];\n\n// Output for 1 record:\n[{ myCvv: 459 }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"xToNum\" dataType=\"CVV Code\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Pass 3 \"x\" to get random CVV Code \n */\nxToNum('xxx'); // Outputs: 459`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTCVV.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTDateTime extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"dateTime\">\n            <h1>Date / Time</h1>\n            <p>This Data Type can be used to generate random Date / Time in various formats.</p>\n            <p>Only one of the unixTimestampMilisecond, unixTimestampSecond, sqlTimestamp will be considered at a moment.</p>\n            <p>Time options will be used only if hasTime is enabled.</p>\n            <p>Date options will be used only if onlyTime is disabled.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>from</td>\n                        <td>number</td>\n                        <td>1 month in back from current date/time in Unix format (13 digits number)</td>\n                        <td>Optional. Date/Time in Unix format.</td>\n                    </tr>\n                    <tr>\n                        <td>to</td>\n                        <td>number</td>\n                        <td>1 month in future from date/time in Unix format (13 digits number)</td>\n                        <td>Optional. Date/Time in Unix format.</td>\n                    </tr>\n                    <tr>\n                        <td>unixTimestampMilisecond</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Should generate Date/Time in Unix format (13 digits number)?</td>\n                    </tr>\n                    <tr>\n                        <td>unixTimestampSecond</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Should generate Date/Time in Unix format (11 digits number)?</td>\n                    </tr>\n                    <tr>\n                        <td>sqlTimestamp</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Should generate SQL timestamp format?</td>\n                    </tr>\n                    <tr>\n                        <td>onlyTime</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Should generate only Time and not Date?</td>\n                    </tr>\n                    <tr>\n                        <td>hasTime</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Should generate Time as well along with Date?</td>\n                    </tr>\n                    <tr>\n                        <td>variant</td>\n                        <td>EVariant</td>\n                        <td>EVariant.FULL</td>\n                        <td>Optional. Can one of the options available in EVariant.\n                            <pre>{`EVariant {\n    SHORT = \"Short\",\n    MEDIUM = \"Medium\",\n    LONG = \"Long\",\n    FULL = \"Full\"\n}`}</pre>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>dateSequence</td>\n                        <td>EDateSequence</td>\n                        <td>EDateSequence.MDY</td>\n                        <td>\n                            <p>Optional. Can one of the options available in EDateSequence.</p>\n                            <p>This option is considered only if variant is short.</p>\n                            <pre>{`EDateSequence {\n    MDY = \"MDY\",\n    DMY = \"DMY\",\n    YMD = \"YMD\"\n}`}</pre>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>dateSeparator</td>\n                        <td>String</td>\n                        <td>EDateSeparator.SLASH</td>\n                        <td>\n                            <p>Optional. dateSeparator is used to place one of the characters available in EDateSeparator between date values.</p>\n                            <p>This option is considered only if variant is short and onlyTime is not enabled.</p>\n                            <pre>{`EDateSeparator {\n    HYPHEN = \"-\",\n    FULLSTOP = \".\",\n    COMMA = \",\",\n    SLASH = \"/\",\n    SPACE = \" \"\n}`}</pre>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>timeSeparator</td>\n                        <td>String</td>\n                        <td>ETimeSeparator.COLON</td>\n                        <td>\n                            <p>Optional. timeSeparator is used to place one of the characters available in ETimeSeparator between time values.</p>\n                            <p>This option is considered only if hasTime is enabled.</p>\n                            <pre>{`ETimeSeparator {\n    HYPHEN = \"-\",\n    FULLSTOP = \".\",\n    COLON = \":\"\n}`}</pre>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst dateTimeJson1 = {\n    \"name\": \"when\",\n    \"type\": \"dateTime\"\n};\n\n// Output for 1 record:\n[{ when: 'Sunday, May 12, 2019' }]\n\n/** \n * Sample 2: Generate SQL timestamp\n */\nconst dateTimeJson2 = {\n    \"name\": \"when\",\n    \"type\": \"dateTime\",\n    \"options\": {\n        \"sqlTimestamp\": true\n    }\n};\n\n// Output for 1 record:\n[{ when: '2019-06-04T12:50:15.090Z' }]\n\n/** \n * Sample 3: Generate unix Timestamp Milisecond (13 digits)\n */\nconst dateTimeJson3 = {\n    \"name\": \"when\",\n    \"type\": \"dateTime\",\n    \"options\": {\n        \"unixTimestampMilisecond\": true\n    }\n};\n\n// Output for 1 record:\n[{ when: '1560184527138' }]\n\n/** \n * Sample 4: Generate only Time\n */\nconst dateTimeJson4 = {\n    \"name\": \"when\",\n    \"type\": \"dateTime\",\n    \"options\": {\n        \"onlyTime\": true\n    }\n};\n\n// Output for 1 record:\n[{ when: '07:58:23 AM IST+05:30' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\ndateTime(); // Outputs: 'Sunday, May 12, 2019'\n\n/** Generate SQL timestamp */\ndateTime({\n    sqlTimestamp: true\n}); // Outputs: '2019-06-04T12:50:15.090Z'\n\n/** Generate unix Timestamp Milisecond (13 digits) */\ndateTime({\n    unixTimestampMilisecond: true\n}); // Outputs: '1560184527138'\n\n/** Generate only Time */\ndateTime({\n    onlyTime: true\n}); // Outputs: '07:58:23 AM IST+05:30'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTDateTime.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTDuration extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"duration\">\n            <h1>Duration</h1>\n            <p>This Data Type can be used to generate random Duration in various formats.</p>\n            <p>Only one of the unixTimestampMilisecond, unixTimestampSecond, sqlTimestamp will be considered at a moment.</p>\n            <p>Time options will be used only if hasTime is enabled.</p>\n            <p>Date options will be used only if onlyTime is disabled.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>prefix</td>\n                        <td>string</td>\n                        <td>Empnty string</td>\n                        <td>Optional. String to prefix to the generated duration value.</td>\n                    </tr>\n                    <tr>\n                        <td>sufix</td>\n                        <td>string</td>\n                        <td>Empnty string</td>\n                        <td>Optional. String to sufix to the generated duration value.</td>\n                    </tr>\n                    <tr>\n                        <td>decades</td>\n                        <td rowSpan={9}>IDUnit</td>\n                        <td rowSpan={9}>For details refer <b>Defaults Values</b> section.</td>\n                        <td rowSpan={9}>Optional. For details refer <b>IDUnit Info</b> section.</td>\n                    </tr>\n                    <tr><td>years</td></tr>\n                    <tr><td>months</td></tr>\n                    <tr><td>weeks</td></tr>\n                    <tr><td>days</td></tr>\n                    <tr><td>hours</td></tr>\n                    <tr><td>minutes</td></tr>\n                    <tr><td>seconds</td></tr>\n                    <tr><td>miliseconds</td></tr>\n                </tbody>\n            </table>\n            <h4>IDUnit Info</h4>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>title</td>\n                        <td>string</td>\n                        <td>Optional. Title to display on UI.</td>\n                    </tr>\n                    <tr>\n                        <td>selected</td>\n                        <td>boolean</td>\n                        <td>Optional. Should include decade value?</td>\n                    </tr>\n                    <tr>\n                        <td>min</td>\n                        <td>number</td>\n                        <td>Optional. min value must be lower than max value.</td>\n                    </tr>\n                    <tr>\n                        <td>max</td>\n                        <td>number</td>\n                        <td>Optional. max value must be greater than min value.</td>\n                    </tr>\n                    <tr>\n                        <td>prefix</td>\n                        <td>string</td>\n                        <td>Optional. String to prefix to the generated decades value.</td>\n                    </tr>\n                    <tr>\n                        <td>sufix</td>\n                        <td>string</td>\n                        <td>Optional. String to sufix to the generated decades value.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h4>Defaults Values</h4>\n            <table>\n                <thead>\n                    <tr>\n                        <th />\n                        <th>title</th>\n                        <th>selected</th>\n                        <th>min</th>\n                        <th>max</th>\n                        <th>sufix</th>\n                        <th>prefix</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th>decades</th>\n                        <td>Decades</td>\n                        <td>false</td>\n                        <td rowSpan={9}>0</td>\n                        <td>9</td>\n                        <td>Decades</td>\n                        <td rowSpan={9}>Empty String</td>\n                    </tr>\n                    <tr>\n                        <th>years</th>\n                        <td>Years</td>\n                        <td>false</td>\n                        <td>1000</td>\n                        <td>Years</td>\n                    </tr>\n                    <tr>\n                        <th>months</th>\n                        <td>Months</td>\n                        <td>false</td>\n                        <td>11</td>\n                        <td>Months</td>\n                    </tr>\n                    <tr>\n                        <th>weeks</th>\n                        <td>Weeks</td>\n                        <td>false</td>\n                        <td>4</td>\n                        <td>Weeks</td>\n                    </tr>\n                    <tr>\n                        <th>days</th>\n                        <td>Days</td>\n                        <td>true</td>\n                        <td>29</td>\n                        <td>Days</td>\n                    </tr>\n                    <tr>\n                        <th>hours</th>\n                        <td>Hours</td>\n                        <td>false</td>\n                        <td>23</td>\n                        <td>Hours</td>\n                    </tr>\n                    <tr>\n                        <th>minutes</th>\n                        <td>Minutes</td>\n                        <td>false</td>\n                        <td>59</td>\n                        <td>Minutes</td>\n                    </tr>\n                    <tr>\n                        <th>seconds</th>\n                        <td>Seconds</td>\n                        <td>false</td>\n                        <td>59</td>\n                        <td>Seconds</td>\n                    </tr>\n                    <tr>\n                        <th>miliseconds</th>\n                        <td>Miliseconds</td>\n                        <td>false</td>\n                        <td>999</td>\n                        <td>Miliseconds</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst durationJson1 = {\n    \"name\": \"timeLeft\",\n    \"type\": \"duration\"\n};\n\n// Output for 1 record:\n[{ timeLeft: '7Days' }]\n\n/** \n * Sample 2: With Weeks and Days enabled\n */\nconst durationJson2 = {\n    \"name\": \"timeLeft\",\n    \"type\": \"duration\",\n    \"options\": {\n        \"prefix\": \"Only\",\n        \"sufix\": \"Left\",\n        \"weeks\": {\n            \"title\": \"Weeks\",\n            \"selected\": true,\n            \"min\": 0,\n            \"max\": 4,\n            \"sufix\": \" Weeks\",\n            \"prefix\": \"\"\n        },\n        \"days\": {\n            \"title\": \"Days\",\n            \"selected\": true,\n            \"min\": 0,\n            \"max\": 29,\n            \"sufix\": \" Days\",\n            \"prefix\": \"and\"\n        }\n    }\n};\n\n// Output for 1 record:\n[{ timeLeft: 'Only 1 Weeks and 11 Days Left' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nduration(); // Outputs: '7Days'\n\n/** With Weeks and Days enabled */\nduration({\n    prefix: 'Only',\n    sufix: 'Left',\n    weeks: {\n        title: 'Weeks',\n        selected: true,\n        min: 0,\n        max: 4,\n        sufix: ' Weeks',\n        prefix: ''\n    },\n    days: {\n        title: 'Days',\n        selected: true,\n        min: 0,\n        max: 29,\n        sufix: ' Days',\n        prefix: 'and'\n    }\n}); // Outputs: 'Only 1 Weeks and 11 Days Left'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTDuration.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTEmail extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"email\">\n            <h1>Email</h1>\n            <p>This Data Type can be used to generate random Email ID with various formats.</p>\n            <p>Either Person name or Random Characters needs to be enabled. If both are disabled, then Person name will be taken by default.</p>\n            <p>In similar manner, either Public or Company domain needs to be enabled. Else Public domains will be considered.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>publicDomains</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Email can use Public domains?</td>\n                    </tr>\n                    <tr>\n                        <td>companyDomains</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Email can use Company domains?</td>\n                    </tr>\n                    <tr>\n                        <td>personName</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Email can have Person Name?</td>\n                    </tr>\n                    <tr>\n                        <td>randomChars</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Email can have Random Characters?</td>\n                    </tr>\n                    <tr>\n                        <td>fullstop</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Can have Fullstop (.) character?.</td>\n                    </tr>\n                    <tr>\n                        <td>underscore</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Can have Underscore (_) character?.</td>\n                    </tr>\n                    <tr>\n                        <td>hyphen</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Can have hypen (-) character?.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst emailJson1 = {\n    \"name\": \"mailId\",\n    \"type\": \"email\"\n};\n\n// Output for 1 record:\n[{ mailId: 'mirandaghoover@gmail.ca' }]\n\n/** \n * Sample 2: With only Random Characters, Company Domain and Hyphen enabled\n */\nconst emailJson2 = {\n    \"name\": \"mailId\",\n    \"type\": \"email\",\n    \"options\": {\n        \"publicDomains\": false,\n        \"companyDomains\": true,\n        \"personName\": false,\n        \"randomChars\": true,\n        \"hyphen\": true,\n        \"fullstop\": false,\n        \"underscore\": false\n    }\n};\n\n// Output for 1 record:\n[{ mailId: 'kznt-lf@egetmalesuadacorporation.net' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nemail(); // Outputs: 'mirandaghoover@gmail.ca'\n\n/** With only Random Characters, Company Domain and Hyphen enabled */\nemail({\n    publicDomains: false,\n    companyDomains: true,\n    personName: false,\n    randomChars: true,\n    hyphen: true,\n    fullstop: false,\n    underscore: false\n}); // Outputs: 'kznt-lf@egetmalesuadacorporation.net'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTEmail.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTGender extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"gender\">\n            <h1>Gender</h1>\n            <p>This Data Type can be used to generate random Gender value in various formats.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>format</td>\n                        <td>\n                            <b>'m/f'</b> | <b>'M/F'</b> | <b>'Male/Female'</b>\n                        </td>\n                        <td><b>'Male/Female'</b></td>\n                        <td>Optional. Can one of the string value from Type column.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst genderJson1 = [{\n    \"name\": \"gend\",\n    \"type\": \"gender\"\n}];\n\n// Output for 1 record:\n[{ gend: 'Female' }]\n\n/** \n * Sample 2: With options of 'm/f' format\n */\n// Sample JSON:\nconst genderJson2 = [{\n    \"name\": \"gend\",\n    \"type\": \"gender\",\n    \"options\": {\n        \"format\": \"m/f\"\n    }\n}];\n\n// Output for 1 record:\n[{ gend: 'm' }]\n\n/** \n * Sample 3: With options of 'M/F' format\n */\nconst genderJson3 = [{\n    \"name\": \"gend\",\n    \"type\": \"gender\",\n    \"options\": {\n        \"format\": \"M/F\"\n    }\n}];\n\n// Output for 1 record:\n[{ gend: 'M' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\ngender(); // Outputs: 'Male'\n\n/** Sample 2: With options of 'm/f' format */\ngender({ format: 'm/f' }); // Outputs: 'f'\n\n/** Sample 3: With options of 'M/F' format */\ngender({ format: 'M/F' }); // Outputs: 'F'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTGender.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTJsonObject extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"json-object\">\n            <h1>JsonObject</h1>\n            <p>\n                This Data Type can be used to generate Object with nested objects.\n            </p>\n            <p>\n                <b>I__D</b> must be defined if you use <b>Upload JSON</b> functionality.\n            </p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * JsonObject as parent with 2 children\n */\nconst jsonObjectJson = [{\n    \"I__D\": \"marks\",\n    \"name\": \"marks\",\n    \"type\": \"jsonObject\"\n}, {\n    \"name\": \"sem1\",\n    \"type\": \"randomNumber\",\n    \"options\": {\n        \"min\": 200, \"max\": 300\n    },\n    \"parentRef\": \"marks\"\n}, {\n    \"name\": \"sem2\",\n    \"type\": \"randomNumber\",\n    \"options\": {\n        \"min\": 400, \"max\": 500\n    },\n    \"parentRef\": \"marks\"\n}];\n\n// Output for 1 record:\n[{\n    \"marks\": {\n        \"sem1\": 267,\n        \"sem2\": 406\n    }\n}]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <p>N/A</p>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTJsonObject.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport CountryRemarks from '../CountryRemarks';\n\nexport default class DTLatLong extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"latLong\">\n            <h1>Latitude / Longitude</h1>\n            <p>\n                This Data Type can be used to generate random Latitude / Longitude value based on given Countries.\n            </p>\n            <CountryRemarks />\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>countries</td>\n                        <td>ICountry[]</td>\n                        <td><pre>\n                            {`[{\n    name: 'India',\n    isdCode: '91',\n    code2: 'IN',\n    code3: 'IND'\n}]`}\n                        </pre></td>\n                        <td>\n                            <p>Optional. List of Countries  in following format</p>\n                            <pre>\n                                {`ICountry = {\n    name: string;\n    isdCode: string;\n    code2: string;\n    code3: string;\n}`}\n                            </pre>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst latLongJson1 = [{\n    \"name\": \"myLatLong\",\n    \"type\": \"latLong\"\n}];\n\n// Output for 1 record:\n[{ myLatLong: '13.25, 80.33' }]\n\n/** \n * Sample 2: With options containing 1 Country\n */\n// Sample JSON:\nconst latLongJson2 = [{\n    \"name\": \"myLatLong\",\n    \"type\": \"latLong\",\n    \"options\": {\n        \"countries\": [{\n            \"name\": \"Brazil\",\n            \"isdCode\": \"55\",\n            \"code2\": \"BR\",\n            \"code3\": \"BRA\"\n        }]\n    }\n}];\n\n// Output for 1 record:\n[{ myLatLong: '-21.55, -46.05' }]\n\n/** \n * Sample 3: With options containing 2 Countries\n */\nconst latLongJson3 = \n[{\n    \"name\": \"myLatLong\",\n    \"type\": \"latLong\",\n    \"options\": {\n        \"countries\": [{\n            \"name\": \"France\",\n            \"isdCode\": \"33\",\n            \"code2\": \"FR\",\n            \"code3\": \"FRA\"\n        }, {\n            \"name\": \"United States\",\n            \"isdCode\": \"1\",\n            \"code2\": \"US\",\n            \"code3\": \"USA\"\n        }]\n    }\n}];\n\n// Output for 1 record:\n[{ myLatLong: '36.42, -80.48' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nlatLong(); // Outputs: '13.25, 80.33'\n\n/** With options containing 1 Country */\nlatLong({\n    countries: [{\n        name: 'Brazil',\n        isdCode: '55',\n        code2: 'BR',\n        code3: 'BRA'\n    }]\n}); // Outputs: '-21.55, -46.05'\n\n/** With options containing 2 Countries */\nlatLong({\n    countries: [{\n        name: 'France',\n        isdCode: '33',\n        code2: 'FR',\n        code3: 'FRA'\n    }, {\n        name: 'United States',\n        isdCode: '1',\n        code2: 'US',\n        code3: 'USA'\n    }]\n}); // Outputs:  '36.42, -80.48'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTLatLong.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTPAN extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"pan\">\n            <h1>Permanent Account Number (PAN)</h1>\n            <p>This Data Type can be used to generate Permanent Account Number (PAN) in \"AAAAAxxxxA\" format.</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst panJson1 = [{\n    \"name\": \"myPan\",\n    \"type\": \"pan\"\n}];\n\n// Output for 1 record:\n[{ myPan: 'ABCDE1234F' }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"alphanumeric\" dataType=\"PAN\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Pass Indian PAN format  \n */\nalphanumeric({ format: 'AAAAAxxxxA' }); // Outputs: ABCDE1234F`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTPAN.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTPassword extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"password\">\n            <h1>Password</h1>\n            <p>This Data Type can be used to generate random Password.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>min</td>\n                        <td>number</td>\n                        <td>6</td>\n                        <td>Optional. min value must be lower than max value.</td>\n                    </tr>\n                    <tr>\n                        <td>max</td>\n                        <td>number</td>\n                        <td>8</td>\n                        <td>Optional. max value must be greater than min value.</td>\n                    </tr>\n                    <tr>\n                        <td>upperCase</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Can have Uppercase letters?.</td>\n                    </tr>\n                    <tr>\n                        <td>lowerCase</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Can have LowerCase letters?.</td>\n                    </tr>\n                    <tr>\n                        <td>digit</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Can have numeric value?.</td>\n                    </tr>\n                    <tr>\n                        <td>specialChar</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Can have special characters?.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst passwordJson1 = {\n    \"name\": \"defaultPwd\",\n    \"type\": \"password\"\n};\n\n// Output for 1 record:\n[{ defaultPwd: '&7G4Ps#' }]\n\n/** \n * Sample 2: Without Special Characters and between 4 - 8\n */\nconst passwordJson2 = {\n    \"name\": \"defaultPwd\",\n    \"type\": \"password\",\n    \"options\": {\n        \"min\": 4,\n        \"max\": 8,\n        \"upperCase\": true,\n        \"lowerCase\": true,\n        \"digit\": true,\n        \"specialChar\": false\n    }\n};\n\n// Output for 1 record:\n[{ defaultPwd: 'IM2UTZqA' }]\n\n/** \n * Sample 3: With lowercase and numeric value only and length should be exact 7 characters\n */\nconst passwordJson3 = {\n    \"name\": \"defaultPwd\",\n    \"type\": \"password\",\n    \"options\": {\n        \"min\": 7,\n        \"max\": 7,\n        \"upperCase\": false,\n        \"lowerCase\": true,\n        \"digit\": true,\n        \"specialChar\": false\n    }\n};;\n\n// Output for 1 record:\n[{ defaultPwd: '12d9xkz' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\npassword(); // Outputs: '&7G4Ps#'\n\n/** Without Special Characters and between 4 - 8 */\npassword({\n    min: 4,\n    max: 8,\n    upperCase: true,\n    lowerCase: true,\n    digit: true,\n    specialChar: false\n}); // Outputs: 'IM2UTZqA'\n\n/** With lowercase and numeric value only and length should be exact 7 characters */\npassword({\n    min: 7,\n    max: 7,\n    upperCase: false,\n    lowerCase: true,\n    digit: true,\n    specialChar: false\n}); // Outputs: '12d9xkz'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTPassword.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTPersonName extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"personName\">\n            <h1>Person Name</h1>\n            <p>This Data Type can be used to generate random Person Name in various formats.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>male</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Can have Male name?.</td>\n                    </tr>\n                    <tr>\n                        <td>female</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Can have Female name?.</td>\n                    </tr>\n                    <tr>\n                        <td>format</td>\n                        <td>EPersonNameFormats</td>\n                        <td>EPersonNameFormats.NAME_SURNAME</td>\n                        <td>Optional. Can one of the following value:\n                            <pre>{`EPersonNameFormats {\n    NAME = 0,\n    SURNAME = 1,\n    NAME_SURNAME = 2,\n    SURNAME_NAME = 3,\n    NAME_INITIAL = 4,\n    NAME_INITIAL_SURNAME = 5,\n    NAME_SURNAME_INITIAL = 6,\n    SURNAME_NAME_INITIAL = 7\n}`}</pre>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst personNameJson1 = {\n    \"name\": \"empName\",\n    \"type\": \"personName\"\n};\n\n// Output for 1 record:\n[{ empName: 'Royalty Pope' }]\n\n/** \n * Sample 2: In \"NAME_INITIAL_SURNAME\" Format\n */\nconst personNameJson2 = {\n    \"name\": \"empName\",\n    \"type\": \"personName\",\n    \"options\": {\n        \"male\": true,\n        \"female\": true,\n        \"format\": 5\n    }\n};\n\n// Output for 1 record:\n[{ empName: 'Juliana X. Miranda' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\npersonName(); // Outputs: 'Royalty Pope'\n\n/** In \"NAME_INITIAL_SURNAME\" Format */\npersonName({\n    male: true,\n    female: true,\n    format: EPersonNameFormats.NAME_INITIAL_SURNAME\n}); // Outputs: 'Juliana X. Miranda'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTPersonName.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTPhoneNo extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"phoneNo\">\n            <h1>Phone Number</h1>\n            <p>This Data Type can be used to generate random Phone Number in various formats.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>countries</td>\n                        <td>ICountry[]</td>\n                        <td><pre>\n                            {`[{\n    name: 'India',\n    isdCode: '91',\n    code2: 'IN',\n    code3: 'IND'\n}]`}\n                        </pre></td>\n                        <td>\n                            <p>Optional. List of Countries  in following format.</p>\n                            <pre>\n                                {`ICountry = {\n    name: string;\n    isdCode: string;\n    code2: string;\n    code3: string;\n}`}\n                            </pre>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>format</td>\n                        <td>EPhoneFormats</td>\n                        <td>EPhoneFormats.PLAIN</td>\n                        <td>Optional. Can one of the options available in EPhoneFormats.\n                            <pre>{`EPhoneFormats {\n    PLAIN = 0,\n    GROUP_OF_2 = 2,\n    GROUP_OF_3 = 3,\n    GROUP_OF_4 = 4,\n    GROUP_OF_5 = 5\n}`}</pre>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>isdInBraces</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Should ISD code be wrapped in \"()\".</td>\n                    </tr>\n                    <tr>\n                        <td>separateISD</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Should ISD code be seperate from number.</td>\n                    </tr>\n                    <tr>\n                        <td>withISD</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Generate number with or without ISD.</td>\n                    </tr>\n                    <tr>\n                        <td>separator</td>\n                        <td>String</td>\n                        <td>EPhoneSeparator.SPACE</td>\n                        <td>Optional. Separator is used to place one of the characters available in EPhoneSeparator between digits, if the format is not PLAIN.\n                            <pre>{`EPhoneSeparator {\n    HYPHEN = \"-\",\n    FULLSTOP = \".\",\n    SPACE = \" \",\n    NON = \"\"\n}`}</pre>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>startsWith</td>\n                        <td>ICSymbol</td>\n                        <td>EPhoneStartsWith.PLUS</td>\n                        <td>Optional. Should generated number starts with one of the characters available in EPhoneStartsWith.\n                            <pre>{`EPhoneStartsWith {\n    PLUS = \"+\",\n    ZEROS = \"00\",\n    ISD = \"\"\n}`}</pre></td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst phoneNoJson1 = {\n    \"name\": \"mobile\",\n    \"type\": \"phoneNo\"\n};\n\n// Output for 1 record:\n[{ mobile: '+91 707497296' }]\n\n/** \n * Sample 2: With isdInBraces = true and format = EPhoneFormats.GROUP_OF_3\n */\nconst phoneNoJson2 = {\n    \"name\": \"mobile\",\n    \"type\": \"phoneNo\",\n    \"options\": {\n        \"countries\": [{\n            \"name\": \"India\",\n            \"isdCode\": \"91\",\n            \"code2\": \"IN\",\n            \"code3\": \"IND\"\n        }],\n        \"format\": 3,\n        \"isdInBraces\": true,\n        \"separateISD\": true,\n        \"separator\": \" \",\n        \"startsWith\": \"+\",\n        \"withISD\": true\n    }\n};\n\n// Output for 1 record:\n[{ mobile: '(+91) 460 139 91' }]\n\n/** \n * Sample 3: With separator= \"-\" and format = EPhoneFormats.GROUP_OF_2\n */\nconst phoneNoJson3 = {\n    \"name\": \"mobile\",\n    \"type\": \"phoneNo\",\n    \"options\": {\n        \"countries\": [{\n            \"name\": \"India\",\n            \"isdCode\": \"91\",\n            \"code2\": \"IN\",\n            \"code3\": \"IND\"\n        }],\n        \"format\": 2,\n        \"isdInBraces\": false,\n        \"separateISD\": true,\n        \"separator\": \"-\",\n        \"startsWith\": \"+\",\n        \"withISD\": true\n    }\n};\n\n// Output for 1 record:\n[{ mobile: '+91-68-02-57-67' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nphoneNo(); // Outputs: '+91 707497296'\n\n/** With isdInBraces = true and format = EPhoneFormats.GROUP_OF_3 */\nphoneNo({\n    countries: [{\n        name: 'India',\n        isdCode: '91',\n        code2: 'IN',\n        code3: 'IND'\n    }],\n    format: 3,\n    isdInBraces: true,\n    separateISD: true,\n    separator: ' ',\n    startsWith: '+',\n    withISD: true,\n}); // Outputs: '(+91) 460 139 91'\n\n/** With separator= \"-\" and format = EPhoneFormats.GROUP_OF_2 */\nphoneNo({\n    countries: [{\n        name: 'India',\n        isdCode: '91',\n        code2: 'IN',\n        code3: 'IND'\n    }],\n    format: 2,\n    isdInBraces: false,\n    separateISD: true,\n    separator: '-',\n    startsWith: '+',\n    withISD: true,\n}); // Outputs: '+91-68-02-57-67'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTPhoneNo.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTPincode extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"pincode\">\n            <h1>Pincode</h1>\n            <p>This Data Type can be used to generate 6 digit Pin/Postal Code.</p>\n            <Availability inApp={true} inLib={false} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst pincodeJson1 = [{\n    \"name\": \"myPin\",\n    \"type\": \"pincode\"\n}];\n\n// Output for 1 record:\n[{ myPin: 458956 }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"xToNum\" dataType=\"Pincode\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Pass 6 \"x\" to get random Pincode number \n */\nxToNum('xxxxxx'); // Outputs: 458956`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTPincode.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTRandomNumber extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"random-number\">\n            <h1>Random Number</h1>\n            <p>This Data Type can be used to generate random number between the given minimum and maximum values.</p>\n            <p>It accepts two parameters, min and max.</p>\n            <p>Defaults are min = 1 and max = 100.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>min</td>\n                        <td>number</td>\n                        <td>1</td>\n                        <td>Optional. min value must be lower than max value.</td>\n                    </tr>\n                    <tr>\n                        <td>max</td>\n                        <td>number</td>\n                        <td>100</td>\n                        <td>Optional. max value must be greater than min value.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst ranNum1 = [{\n    \"name\": \"score1\",\n    \"type\": \"randomNumber\"\n}];\n\n// Output for 1 record:\n[{ score1: 67 }]\n\n/** \n * Sample 2: With min = 10 & max = 20\n */\n// Sample JSON:\nconst ranNum2 = [{\n    \"name\": \"score2\",\n    \"type\": \"randomNumber\",\n    \"options\": { \"min\": 10, \"max\": 20 }\n}];\n\n// Output for 1 record:\n[{ score2: 16 }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"randomNum\" dataType=\"Random Number\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nrandomNum(); // Outputs: 67\n\n/** Sample 2: With min = 10 & max = 20 */\nrandomNum(10, 20); // Outputs: 16`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTRandomNumber.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTRandomWords extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"random-words\">\n            <h1>Random Words</h1>\n            <p>This Data Type can be used to generate random sentence as per given minimum and maximum length of words.</p>\n            <p>It accepts two parameters, min and max.</p>\n            <p>Defaults are min = 3 and max = 20.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>min</td>\n                        <td>number</td>\n                        <td>3</td>\n                        <td>Optional. min value must be lower than max value.</td>\n                    </tr>\n                    <tr>\n                        <td>max</td>\n                        <td>number</td>\n                        <td>20</td>\n                        <td>Optional. max value must be greater than min value.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst ranWords1 = [{\n    \"name\": \"comments1\",\n    \"type\": \"randomWords\"\n}];\n\n// Output for 1 record:\n[{ comments1: 'Curabitur scelerisque mattis Vestibulum adipiscing Praesent ultricies hendrerit ante' }]\n\n/** \n * Sample 2: With min = 10 & max = 20\n */\n// Sample JSON:\nconst ranWords2 = [{\n    \"name\": \"comments2\",\n    \"type\": \"randomWords\",\n    \"options\": { \"min\": 3, \"max\": 6 }\n}];\n\n// Output for 1 record:\n[{ comments2: 'adipiscing Praesent ultricies hendrerit' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nrandomWords(); // Outputs: 'Curabitur scelerisque mattis Vestibulum adipiscing Praesent ultricies hendrerit ante'\n\n/** Sample 2: With min = 3 & max = 6 */\nrandomWords(3, 6); // Outputs: 'adipiscing Praesent ultricies hendrerit'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTRandomWords.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport CountryRemarks from '../CountryRemarks';\n\nexport default class DTState extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        console.log(this.props);\n        return (<article className=\"state\">\n            <h1>State / Province</h1>\n            <p>\n                This Data Type can be used to generate random State / Province name based on given Countries.\n            </p>\n            <CountryRemarks />\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>countries</td>\n                        <td>ICountry[]</td>\n                        <td><pre>\n                            {`[{\n    name: 'India',\n    isdCode: '91',\n    code2: 'IN',\n    code3: 'IND'\n}]`}\n                        </pre></td>\n                        <td>\n                            <p>Optional. List of Countries  in following format.</p>\n                            <pre>\n                                {`ICountry = {\n    name: string;\n    isdCode: string;\n    code2: string;\n    code3: string;\n}`}\n                            </pre>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst stateJson1 = [{\n    \"name\": \"myState\",\n    \"type\": \"state\"\n}];\n\n// Output for 1 record:\n[{ myState: 'Punjab' }]\n\n/** \n * Sample 2: With options containing 1 Country\n */\n// Sample JSON:\nconst stateJson2 = [{\n    \"name\": \"myState\",\n    \"type\": \"state\",\n    \"options\": {\n        \"countries\": [{\n            \"name\": \"Brazil\",\n            \"isdCode\": \"55\",\n            \"code2\": \"BR\",\n            \"code3\": \"BRA\"\n        }]\n    }\n}];\n\n// Output for 1 record:\n[{ myState: 'Ceara' }]\n\n/** \n * Sample 3: With options containing 2 Countries\n */\nconst stateJson3 = \n[{\n    \"name\": \"myState\",\n    \"type\": \"state\",\n    \"options\": {\n        \"countries\": [{\n            \"name\": \"France\",\n            \"isdCode\": \"33\",\n            \"code2\": \"FR\",\n            \"code3\": \"FRA\"\n        }, {\n            \"name\": \"United States\",\n            \"isdCode\": \"1\",\n            \"code2\": \"US\",\n            \"code3\": \"USA\"\n        }]\n    }\n}];\n\n// Output for 1 record:\n[{ myState: 'Territoire de Belfort' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nstate(); // Outputs: 'Himachal Pardesh'\n\n/** With options containing 1 Country */\nstate({\n    countries: [{\n        name: 'Brazil',\n        isdCode: '55',\n        code2: 'BR',\n        code3: 'BRA'\n    }]\n}); // Outputs: 'Ceara'\n\n/** With options containing 2 Countries */\nstate({\n    countries: [{\n        name: 'France',\n        isdCode: '33',\n        code2: 'FR',\n        code3: 'FRA'\n    }, {\n        name: 'United States',\n        isdCode: '1',\n        code2: 'US',\n        code3: 'USA'\n    }]\n}); // Outputs:  'Territoire de Belfort'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTState.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTStreetAddress extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"street-address\">\n            <h1>Street Address</h1>\n            <p>This Data Type can be used to generate random Street Address.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst adjson = [{\n    \"name\": \"myAddress\",\n    \"type\": \"address\"\n}];\n\n// Output for 1 record:\n[{ myAddress: 'Kothi 58, Suspendisse Street, Vitae Ave.' }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`address(); // Outputs: Kothi 58, Suspendisse Street, Vitae Ave.`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTStreetAddress.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\nimport NoUtilityRemarks from '../NoUtilityRemarks';\n\nexport default class DTUID extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"uid\">\n            <h1>Unique ID</h1>\n            <p>This Data Type can be used to generate unique ID</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It does not have any options to customize the output.</p>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/**\n * Sample JSON:\n */\nconst uidJson1 = [{\n    \"name\": \"recordId\",\n    \"type\": \"uid\"\n}];\n\n// Output for 1 record:\n[{ recordId: '3c3eb18b-d7f2-48a5-b91b-65ded9e4eb24' }]\n`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <NoUtilityRemarks methodName=\"setUID\" dataType=\"UID\" />\n            <pre>\n                <code className=\"language-javascript\">\n                    {`setUID(); // Outputs: '3c3eb18b-d7f2-48a5-b91b-65ded9e4eb24'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTUID.tsx","import * as React from 'react';\nimport { Component } from 'react';\nimport Availability from '../Availability';\n\nexport default class DTUsername extends Component<IOnMount> {\n\n    componentDidMount() {\n        this.props.onMount && this.props.onMount();\n    }\n\n    render() {\n        return (<article className=\"username\">\n            <h1>Username</h1>\n            <p>This Data Type can be used to generate random Username with various formats.</p>\n            <p>Either Person name or Random Characters needs to be enabled. If both are disabled, then Person name will be taken by default.</p>\n            <Availability inApp={true} inLib={true} />\n            <h2>Options</h2>\n            <p>It provides following options to configure:</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Defaults</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>personName</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Optional. Username can have Person Name?</td>\n                    </tr>\n                    <tr>\n                        <td>randomChars</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Username can have Random Characters?</td>\n                    </tr>\n                    <tr>\n                        <td>fullstop</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Can have Fullstop (.) character?.</td>\n                    </tr>\n                    <tr>\n                        <td>underscore</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Can have Underscore (_) character?.</td>\n                    </tr>\n                    <tr>\n                        <td>hyphen</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>Optional. Can have hypen (-) character?.</td>\n                    </tr>\n                </tbody>\n            </table>\n            <h2>Examples</h2>\n            <h3>Web App:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** \n * Sample 1: Without options \n */\nconst usernameJson1 = {\n    \"name\": \"userId\",\n    \"type\": \"username\"\n};\n\n// Output for 1 record:\n[{ userId: 'galileakennedy' }]\n\n/** \n * Sample 2: With only Random Characters and Hyphen enabled\n */\nconst usernameJson2 = {\n    \"name\": \"userId\",\n    \"type\": \"username\",\n    \"options\": {\n        \"personName\": false,\n        \"randomChars\": true,\n        \"hyphen\": true,\n        \"fullstop\": false,\n        \"underscore\": false\n    }\n};\n\n// Output for 1 record:\n[{ userId: 'sru11dqb-puk' }]`}\n                </code>\n            </pre>\n            <h3>Utility method:</h3>\n            <pre>\n                <code className=\"language-javascript\">\n                    {`/** Default */\nusername(); // Outputs: 'galileakennedy'\n\n/** With only Random Characters and Hyphen enabled */\nusername({\n    personName: false,\n    randomChars: true,\n    hyphen: true,\n    fullstop: false,\n    underscore: false\n}); // Outputs: 'sru11dqb-puk'`}\n                </code>\n            </pre>\n        </article>);\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/components/DataTypes/DTUsername.tsx"],"sourceRoot":""}